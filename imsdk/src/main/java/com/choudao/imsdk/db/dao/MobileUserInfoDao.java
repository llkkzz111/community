package com.choudao.imsdk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.choudao.imsdk.db.bean.MobileUserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOBILE_USER_INFO".
*/
public class MobileUserInfoDao extends AbstractDao<MobileUserInfo, Long> {

    public static final String TABLENAME = "MOBILE_USER_INFO";

    /**
     * Properties of entity MobileUserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property NamePinYin = new Property(3, String.class, "namePinYin", false, "NAME_PIN_YIN");
        public final static Property Phone = new Property(4, String.class, "phone", false, "PHONE");
        public final static Property HeadImgUrl = new Property(5, String.class, "headImgUrl", false, "HEAD_IMG_URL");
        public final static Property MobName = new Property(6, String.class, "mobName", false, "MOB_NAME");
        public final static Property MobEmail = new Property(7, String.class, "mobEmail", false, "MOB_EMAIL");
        public final static Property State = new Property(8, Boolean.class, "state", false, "STATE");
    };


    public MobileUserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MobileUserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOBILE_USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL UNIQUE ," + // 1: userId
                "\"NAME\" TEXT," + // 2: name
                "\"NAME_PIN_YIN\" TEXT," + // 3: namePinYin
                "\"PHONE\" TEXT NOT NULL ," + // 4: phone
                "\"HEAD_IMG_URL\" TEXT," + // 5: headImgUrl
                "\"MOB_NAME\" TEXT," + // 6: mobName
                "\"MOB_EMAIL\" TEXT," + // 7: mobEmail
                "\"STATE\" INTEGER);"); // 8: state
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_MOBILE_USER_INFO_USER_ID ON MOBILE_USER_INFO" +
                " (\"USER_ID\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MOBILE_USER_INFO_PHONE ON MOBILE_USER_INFO" +
                " (\"PHONE\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOBILE_USER_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MobileUserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String namePinYin = entity.getNamePinYin();
        if (namePinYin != null) {
            stmt.bindString(4, namePinYin);
        }
        stmt.bindString(5, entity.getPhone());
 
        String headImgUrl = entity.getHeadImgUrl();
        if (headImgUrl != null) {
            stmt.bindString(6, headImgUrl);
        }
 
        String mobName = entity.getMobName();
        if (mobName != null) {
            stmt.bindString(7, mobName);
        }
 
        String mobEmail = entity.getMobEmail();
        if (mobEmail != null) {
            stmt.bindString(8, mobEmail);
        }
 
        Boolean state = entity.getState();
        if (state != null) {
            stmt.bindLong(9, state ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MobileUserInfo readEntity(Cursor cursor, int offset) {
        MobileUserInfo entity = new MobileUserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // namePinYin
            cursor.getString(offset + 4), // phone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // headImgUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mobName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mobEmail
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // state
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MobileUserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNamePinYin(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhone(cursor.getString(offset + 4));
        entity.setHeadImgUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMobName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMobEmail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setState(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MobileUserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MobileUserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
