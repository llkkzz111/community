package com.choudao.imsdk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.choudao.imsdk.db.bean.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property UserType = new Property(2, Integer.class, "userType", false, "USER_TYPE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Remark = new Property(5, String.class, "remark", false, "REMARK");
        public final static Property NamePinYin = new Property(6, String.class, "namePinYin", false, "NAME_PIN_YIN");
        public final static Property RemarkPinYin = new Property(7, String.class, "remarkPinYin", false, "REMARK_PIN_YIN");
        public final static Property HeadImgUrl = new Property(8, String.class, "headImgUrl", false, "HEAD_IMG_URL");
        public final static Property Phone = new Property(9, String.class, "phone", false, "PHONE");
        public final static Property Desc = new Property(10, String.class, "desc", false, "DESC");
        public final static Property Address = new Property(11, String.class, "address", false, "ADDRESS");
        public final static Property ShareUrl = new Property(12, String.class, "shareUrl", false, "SHARE_URL");
        public final static Property QuestionCount = new Property(13, Integer.class, "questionCount", false, "QUESTION_COUNT");
        public final static Property AnswerCount = new Property(14, Integer.class, "answerCount", false, "ANSWER_COUNT");
        public final static Property FollowersCount = new Property(15, Integer.class, "followersCount", false, "FOLLOWERS_COUNT");
        public final static Property FollowingCount = new Property(16, Integer.class, "followingCount", false, "FOLLOWING_COUNT");
    };


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL UNIQUE ," + // 1: userId
                "\"USER_TYPE\" INTEGER," + // 2: userType
                "\"NAME\" TEXT," + // 3: name
                "\"TITLE\" TEXT," + // 4: title
                "\"REMARK\" TEXT," + // 5: remark
                "\"NAME_PIN_YIN\" TEXT," + // 6: namePinYin
                "\"REMARK_PIN_YIN\" TEXT," + // 7: remarkPinYin
                "\"HEAD_IMG_URL\" TEXT," + // 8: headImgUrl
                "\"PHONE\" TEXT," + // 9: phone
                "\"DESC\" TEXT," + // 10: desc
                "\"ADDRESS\" TEXT," + // 11: address
                "\"SHARE_URL\" TEXT," + // 12: shareUrl
                "\"QUESTION_COUNT\" INTEGER DEFAULT 0," + // 13: questionCount
                "\"ANSWER_COUNT\" INTEGER DEFAULT 0," + // 14: answerCount
                "\"FOLLOWERS_COUNT\" INTEGER," + // 15: followersCount
                "\"FOLLOWING_COUNT\" INTEGER);"); // 16: followingCount
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_USER_INFO_USER_ID ON USER_INFO" +
                " (\"USER_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        Integer userType = entity.getUserType();
        if (userType != null) {
            stmt.bindLong(3, userType);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(6, remark);
        }
 
        String namePinYin = entity.getNamePinYin();
        if (namePinYin != null) {
            stmt.bindString(7, namePinYin);
        }
 
        String remarkPinYin = entity.getRemarkPinYin();
        if (remarkPinYin != null) {
            stmt.bindString(8, remarkPinYin);
        }
 
        String headImgUrl = entity.getHeadImgUrl();
        if (headImgUrl != null) {
            stmt.bindString(9, headImgUrl);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(10, phone);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(11, desc);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(12, address);
        }
 
        String shareUrl = entity.getShareUrl();
        if (shareUrl != null) {
            stmt.bindString(13, shareUrl);
        }
 
        Integer questionCount = entity.getQuestionCount();
        if (questionCount != null) {
            stmt.bindLong(14, questionCount);
        }
 
        Integer answerCount = entity.getAnswerCount();
        if (answerCount != null) {
            stmt.bindLong(15, answerCount);
        }
 
        Integer followersCount = entity.getFollowersCount();
        if (followersCount != null) {
            stmt.bindLong(16, followersCount);
        }
 
        Integer followingCount = entity.getFollowingCount();
        if (followingCount != null) {
            stmt.bindLong(17, followingCount);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // userType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // remark
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // namePinYin
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // remarkPinYin
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // headImgUrl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // phone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // desc
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // address
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // shareUrl
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // questionCount
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // answerCount
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // followersCount
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16) // followingCount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setUserType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNamePinYin(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemarkPinYin(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHeadImgUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDesc(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAddress(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setShareUrl(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setQuestionCount(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setAnswerCount(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setFollowersCount(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setFollowingCount(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
