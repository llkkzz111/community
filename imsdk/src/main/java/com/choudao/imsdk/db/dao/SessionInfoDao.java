package com.choudao.imsdk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.choudao.imsdk.db.bean.SessionInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SESSION_INFO".
*/
public class SessionInfoDao extends AbstractDao<SessionInfo, Long> {

    public static final String TABLENAME = "SESSION_INFO";

    /**
     * Properties of entity SessionInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TargetId = new Property(1, long.class, "targetId", false, "TARGET_ID");
        public final static Property TargetType = new Property(2, Integer.class, "targetType", false, "TARGET_TYPE");
        public final static Property SessionType = new Property(3, int.class, "sessionType", false, "SESSION_TYPE");
        public final static Property Count = new Property(4, Integer.class, "count", false, "COUNT");
        public final static Property LastMessage = new Property(5, String.class, "lastMessage", false, "LAST_MESSAGE");
        public final static Property LastMessageId = new Property(6, Long.class, "lastMessageId", false, "LAST_MESSAGE_ID");
        public final static Property LastTime = new Property(7, Long.class, "lastTime", false, "LAST_TIME");
    };


    public SessionInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SessionInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SESSION_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TARGET_ID\" INTEGER NOT NULL ," + // 1: targetId
                "\"TARGET_TYPE\" INTEGER," + // 2: targetType
                "\"SESSION_TYPE\" INTEGER NOT NULL ," + // 3: sessionType
                "\"COUNT\" INTEGER," + // 4: count
                "\"LAST_MESSAGE\" TEXT," + // 5: lastMessage
                "\"LAST_MESSAGE_ID\" INTEGER," + // 6: lastMessageId
                "\"LAST_TIME\" INTEGER);"); // 7: lastTime
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_SESSION_INFO_LAST_TIME ON SESSION_INFO" +
                " (\"LAST_TIME\");");
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_SESSION_INFO_TARGET_ID_SESSION_TYPE ON SESSION_INFO" +
                " (\"TARGET_ID\",\"SESSION_TYPE\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SESSION_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SessionInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTargetId());
 
        Integer targetType = entity.getTargetType();
        if (targetType != null) {
            stmt.bindLong(3, targetType);
        }
        stmt.bindLong(4, entity.getSessionType());
 
        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(5, count);
        }
 
        String lastMessage = entity.getLastMessage();
        if (lastMessage != null) {
            stmt.bindString(6, lastMessage);
        }
 
        Long lastMessageId = entity.getLastMessageId();
        if (lastMessageId != null) {
            stmt.bindLong(7, lastMessageId);
        }
 
        Long lastTime = entity.getLastTime();
        if (lastTime != null) {
            stmt.bindLong(8, lastTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SessionInfo readEntity(Cursor cursor, int offset) {
        SessionInfo entity = new SessionInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // targetId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // targetType
            cursor.getInt(offset + 3), // sessionType
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // count
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lastMessage
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // lastMessageId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // lastTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SessionInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTargetId(cursor.getLong(offset + 1));
        entity.setTargetType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSessionType(cursor.getInt(offset + 3));
        entity.setCount(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setLastMessage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLastMessageId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setLastTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SessionInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SessionInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
