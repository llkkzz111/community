package com.community.imsdk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;


import com.community.imsdk.db.bean.PrivateMessage;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PRIVATE_MESSAGE".
 */
public class PrivateMessageDao extends AbstractDao<PrivateMessage, Long> {

    public static final String TABLENAME = "PRIVATE_MESSAGE";

    /**
     * Properties of entity PrivateMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ChatId = new Property(1, long.class, "chatId", false, "CHAT_ID");
        public final static Property ChatType = new Property(2, int.class, "chatType", false, "CHAT_TYPE");
        public final static Property SendUserId = new Property(3, Long.class, "sendUserId", false, "SEND_USER_ID");
        public final static Property SendUserType = new Property(4, Integer.class, "sendUserType", false, "SEND_USER_TYPE");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
        public final static Property ContentType = new Property(6, Integer.class, "contentType", false, "CONTENT_TYPE");
        public final static Property SessionType = new Property(7, int.class, "sessionType", false, "SESSION_TYPE");
        public final static Property SendStatus = new Property(8, Integer.class, "sendStatus", false, "SEND_STATUS");
        public final static Property MsgId = new Property(9, long.class, "msgId", false, "MSG_ID");
        public final static Property Timestamp = new Property(10, Long.class, "timestamp", false, "TIMESTAMP");
    }

    ;


    public PrivateMessageDao(DaoConfig config) {
        super(config);
    }

    public PrivateMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRIVATE_MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CHAT_ID\" INTEGER NOT NULL ," + // 1: chatId
                "\"CHAT_TYPE\" INTEGER NOT NULL ," + // 2: chatType
                "\"SEND_USER_ID\" INTEGER," + // 3: sendUserId
                "\"SEND_USER_TYPE\" INTEGER," + // 4: sendUserType
                "\"CONTENT\" TEXT," + // 5: content
                "\"CONTENT_TYPE\" INTEGER DEFAULT 1 ," + // 6: contentType
                "\"SESSION_TYPE\" INTEGER NOT NULL DEFAULT 1 ," + // 7: sessionType
                "\"SEND_STATUS\" INTEGER," + // 8: sendStatus
                "\"MSG_ID\" INTEGER NOT NULL ," + // 9: msgId
                "\"TIMESTAMP\" INTEGER);"); // 10: timestamp
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_PRIVATE_MESSAGE_TIMESTAMP ON PRIVATE_MESSAGE" +
                " (\"TIMESTAMP\");");
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_PRIVATE_MESSAGE_CHAT_ID_MSG_ID_SESSION_TYPE ON PRIVATE_MESSAGE" +
                " (\"CHAT_ID\",\"MSG_ID\",\"SESSION_TYPE\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRIVATE_MESSAGE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PrivateMessage entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getChatId());
        stmt.bindLong(3, entity.getChatType());

        Long sendUserId = entity.getSendUserId();
        if (sendUserId != null) {
            stmt.bindLong(4, sendUserId);
        }

        Integer sendUserType = entity.getSendUserType();
        if (sendUserType != null) {
            stmt.bindLong(5, sendUserType);
        }

        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }

        Integer contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindLong(7, contentType);
        }
        stmt.bindLong(8, entity.getSessionType());

        Integer sendStatus = entity.getSendStatus();
        if (sendStatus != null) {
            stmt.bindLong(9, sendStatus);
        }
        stmt.bindLong(10, entity.getMsgId());

        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(11, timestamp);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public PrivateMessage readEntity(Cursor cursor, int offset) {
        PrivateMessage entity = new PrivateMessage( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getLong(offset + 1), // chatId
                cursor.getInt(offset + 2), // chatType
                cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // sendUserId
                cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // sendUserType
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // content
                cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // contentType
                cursor.getInt(offset + 7), // sessionType
                cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // sendStatus
                cursor.getLong(offset + 9), // msgId
                cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // timestamp
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PrivateMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChatId(cursor.getLong(offset + 1));
        entity.setChatType(cursor.getInt(offset + 2));
        entity.setSendUserId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setSendUserType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContentType(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setSessionType(cursor.getInt(offset + 7));
        entity.setSendStatus(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setMsgId(cursor.getLong(offset + 9));
        entity.setTimestamp(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PrivateMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(PrivateMessage entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    public long insertOrIgnore(PrivateMessage entity) {
        String sql = "INSERT OR IGNORE INTO \"PRIVATE_MESSAGE\" (\"_id\",\"CHAT_ID\",\"CHAT_TYPE\",\"SEND_USER_ID\",\"SEND_USER_TYPE\",\"CONTENT\",\"CONTENT_TYPE\",\"SESSION_TYPE\",\"SEND_STATUS\",\"MSG_ID\",\"TIMESTAMP\") VALUES (?,?,?,?,?,?,?,?,?,?,?)";

        SQLiteStatement stmt = db.compileStatement(sql);
        long rowId;
        if (db.isDbLockedByCurrentThread()) {
            synchronized (stmt) {
                bindValues(stmt, entity);
                rowId = stmt.executeInsert();
            }
        } else {
            // Do TX to acquire a connection before locking the stmt to avoid deadlocks
            db.beginTransaction();
            try {
                synchronized (stmt) {
                    bindValues(stmt, entity);
                    rowId = stmt.executeInsert();
                }
                db.setTransactionSuccessful();
            } finally {
                db.endTransaction();
            }
        }
        updateKeyAfterInsertAndAttach(entity, rowId, true);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
