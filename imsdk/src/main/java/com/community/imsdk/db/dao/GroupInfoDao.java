package com.community.imsdk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.community.imsdk.db.bean.GroupInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_INFO".
*/
public class GroupInfoDao extends AbstractDao<GroupInfo, Long> {

    public static final String TABLENAME = "GROUP_INFO";

    /**
     * Properties of entity GroupInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GroupId = new Property(1, long.class, "groupId", false, "GROUP_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property LocalName = new Property(3, String.class, "localName", false, "LOCAL_NAME");
        public final static Property Notice = new Property(4, String.class, "notice", false, "NOTICE");
        public final static Property HeadImgUrl = new Property(5, String.class, "headImgUrl", false, "HEAD_IMG_URL");
        public final static Property Type = new Property(6, Integer.class, "type", false, "TYPE");
        public final static Property Holder = new Property(7, Long.class, "holder", false, "HOLDER");
        public final static Property MemberCount = new Property(8, Integer.class, "memberCount", false, "MEMBER_COUNT");
        public final static Property MemberVersion = new Property(9, Integer.class, "memberVersion", false, "MEMBER_VERSION");
        public final static Property InfoVersion = new Property(10, Integer.class, "infoVersion", false, "INFO_VERSION");
        public final static Property IsKickOut = new Property(11, boolean.class, "isKickOut", false, "IS_KICK_OUT");
        public final static Property IsNewNotice = new Property(12, boolean.class, "isNewNotice", false, "IS_NEW_NOTICE");
    };


    public GroupInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GroupInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GROUP_ID\" INTEGER NOT NULL UNIQUE ," + // 1: groupId
                "\"NAME\" TEXT," + // 2: name
                "\"LOCAL_NAME\" TEXT," + // 3: localName
                "\"NOTICE\" TEXT," + // 4: notice
                "\"HEAD_IMG_URL\" TEXT," + // 5: headImgUrl
                "\"TYPE\" INTEGER," + // 6: type
                "\"HOLDER\" INTEGER," + // 7: holder
                "\"MEMBER_COUNT\" INTEGER," + // 8: memberCount
                "\"MEMBER_VERSION\" INTEGER," + // 9: memberVersion
                "\"INFO_VERSION\" INTEGER," + // 10: infoVersion
                "\"IS_KICK_OUT\" INTEGER NOT NULL ," + // 11: isKickOut
                "\"IS_NEW_NOTICE\" INTEGER NOT NULL );"); // 12: isNewNotice
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_GROUP_INFO_GROUP_ID ON GROUP_INFO" +
                " (\"GROUP_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GroupInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGroupId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String localName = entity.getLocalName();
        if (localName != null) {
            stmt.bindString(4, localName);
        }
 
        String notice = entity.getNotice();
        if (notice != null) {
            stmt.bindString(5, notice);
        }
 
        String headImgUrl = entity.getHeadImgUrl();
        if (headImgUrl != null) {
            stmt.bindString(6, headImgUrl);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(7, type);
        }
 
        Long holder = entity.getHolder();
        if (holder != null) {
            stmt.bindLong(8, holder);
        }
 
        Integer memberCount = entity.getMemberCount();
        if (memberCount != null) {
            stmt.bindLong(9, memberCount);
        }
 
        Integer memberVersion = entity.getMemberVersion();
        if (memberVersion != null) {
            stmt.bindLong(10, memberVersion);
        }
 
        Integer infoVersion = entity.getInfoVersion();
        if (infoVersion != null) {
            stmt.bindLong(11, infoVersion);
        }
        stmt.bindLong(12, entity.getIsKickOut() ? 1L: 0L);
        stmt.bindLong(13, entity.getIsNewNotice() ? 1L: 0L);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GroupInfo readEntity(Cursor cursor, int offset) {
        GroupInfo entity = new GroupInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // groupId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // localName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // notice
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // headImgUrl
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // holder
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // memberCount
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // memberVersion
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // infoVersion
            cursor.getShort(offset + 11) != 0, // isKickOut
            cursor.getShort(offset + 12) != 0 // isNewNotice
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GroupInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroupId(cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocalName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNotice(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHeadImgUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setHolder(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setMemberCount(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setMemberVersion(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setInfoVersion(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setIsKickOut(cursor.getShort(offset + 11) != 0);
        entity.setIsNewNotice(cursor.getShort(offset + 12) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GroupInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GroupInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
